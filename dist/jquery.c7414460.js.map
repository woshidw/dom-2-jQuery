{"version":3,"sources":["jquery.js"],"names":["window","$","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","createElements","string","container","createElement","innerHTML","trim","content","firstChild","api","Object","create","prototype","assign","oldApi","selectorOrArrayOrTemplate","constructor","jquery","get","index","appendTo","node","Element","each","el","appendChild","append","children","HTMLCollection","i","length","find","selector","array","elements2","from","concat","newApi","fn","call","parent","indexOf","parentNode","push","print","console","log","addClass","className","element","classList","add","end"],"mappings":"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","file":"jquery.c7414460.js","sourceRoot":"..\\src","sourcesContent":["window.$ = window.jQuery = function (selectorOrArray) {\r\n  //等号赋值从右忘左执行，也可以在最后写成window.$ = window.jQuery\r\n  let elements;\r\n  //const声明了必须赋值，这里用let\r\n  //先声明一个值为空，然后根据你的选择器是string还是Array，分别赋予不同的值\r\n  //，然后再返回一个api去操作它\r\n  if (typeof selectorOrArray === \"string\") {\r\n    elements = document.querySelectorAll(selectorOrArray);\r\n  } else if (selectorOrArray instanceof Array) {\r\n    elements = selectorOrArray;\r\n  }\r\n\r\n  function createElements(string) {\r\n    const container = document.createElement(\"template\");\r\n    container.innerHTML = string.trim();\r\n    return container.content.firstChild;\r\n  }\r\n    \r\n  //api 可以操作elements\r\n  //api一开始就把原型链链上，共有属性不用操心了，特有属性就放到自己身上\r\n  const api = Object.create(jQuery.prototype)//创建一个对象，这个对象的 __proto__为括号里的东西\r\n  //相当于 const api = {__proto__: jQuery.prototype}\r\n  //api.elements = elements//不能把之前的覆盖了\r\n  //api.oldApi = selectorOrArrayOrTemplate.oldApi\r\n\r\n  //简写\r\n  Object.assign(api, {//Object.assign的意思就是把后面对象的属性一个一个赋值到前面api来\r\n    elements: elements,\r\n    oldApi: selectorOrArrayOrTemplate.oldApi\r\n  })\r\n  return api\r\n};\r\n  \r\n//jQuery.fn = jQuery.prototype={}//给prototype给了个别名fn\r\njQuery.prototype = {//共有属性放到这里来 \r\n  constructor: jQuery,//prototype需要个constructor，值就是jQuery\r\n  jquery : true,\r\n  get(index) {\r\n    return this.elements[index];//this.elements就是api的elements，就是api变量elements\r\n  },\r\n\r\n\r\n  //find 一个test\r\n  // find(selector){\r\n  // //find是一个函数缩写，它可以接受一个选择器。\r\n  // //find就是找到当前元素里面的所有匹配这个选择器的元素\r\n  //    //，然后把元素放到数组里，在return这个数组\r\n  //   let array = []\r\n  //   for(let i=0;i<elements.length;i++){\r\n  //       array= array.concat(Array.from (elements[i]\r\n  //         .querySelectorAll(selector)))\r\n  //   }\r\n  //   return array\r\n  // }\r\n\r\n  appendTo(node) {\r\n    if (node instanceof Element) {\r\n      this.each((el) => node.appendChild(el)); // 遍历 elements，对每个 el 进行 node.appendChild 操作\r\n    } else if (node.jquery === true) {\r\n      this.each((el) => node.get(0).appendChild(el)); // 遍历 elements，对每个 el 进行 node.get(0).appendChild(el))  操作\r\n    }\r\n  },\r\n  append(children) {\r\n    if (children instanceof Element) {\r\n      this.get(0).appendChild(children);\r\n    } else if (children instanceof HTMLCollection) {\r\n      for (let i = 0; i < children.length; i++) {\r\n        this.get(0).appendChild(children[i]);\r\n      }\r\n    } else if (children.jquery === true) {\r\n      children.each((node) => this.get(0).appendChild(node));\r\n    }\r\n  },\r\n\r\n  //放在了上面来\r\n  //find多个test\r\n  //第一步：不能直接return之前的操作，我们要得到一个新的api，这个新的api要靠jQuery构造出来\r\n  //第二步：jQuery不能只接受选择器，还要可以接受一个数组\r\n  //第三步：如果接收的是个数组的话，就让新的elements\r\n  find(selector) {\r\n    let array = [];\r\n    for (let i = 0; i < elements.length; i++) {\r\n      const elements2 = Array.from(elements[i].querySelectorAll(selector));\r\n      array = array.concat(elements2);\r\n      //多个test//首先遍历这个elements，然后做一个中间的变量elements2\r\n    }\r\n\r\n    array.oldApi = this; //this就是 api，旧的api//放到了数组身上，api也有oldApi\r\n    //return一个新的api,因为return一个数组的话他不是一个函数无法调用\r\n    //所以selectorOrArray\r\n    const newApi = jQuery(array); //给我一个数组我给你返回一个新的api，如果直接用同一个api，那么每次得到新的元素都会污染之前的api，所有一定要得到一个新的对象，这个新对象就叫newApi\r\n    return newApi; //现在这个api和刚刚的api就是完全不同的对象了，\r\n    //这个是由jQuery函数重新返回一个（new Object在new一个Object，两个Object是不同的object）\r\n    //用重载判断一下选择器\r\n\r\n    //简写\r\n    //  return jQuery(array)//实际上我要得到一个新的api对象，这个新的api对象用来操作array。\r\n    //总结一句话就是，jQuery你给我传什么，我就会返回一个对象操作什么。\r\n  },\r\n\r\n  //each遍历当前的所有元素\r\n  each(fn) {\r\n    for (let i = 0; i < elements.length; i++) {\r\n      //elements是个闭包会一直在第二行，不会丢失\r\n      fn.call(null, elements[i], i);\r\n      //call来调用，this传空，给元素下标知道是第几个\r\n    }\r\n    return this; //this就是api对象，当前api\r\n  },\r\n\r\n  //实现parent\r\n  //parent不需要参数，直接什么什么.parent\r\n  parent() {\r\n    //获取对应元素的爸爸\r\n    const array = [];\r\n    this.each((node) => {\r\n      //每一个元素我们要得到一个节点\r\n      if (array.indexOf(node.parentNode) === -1) {\r\n        //push的时候判断一下，不在里面就是等于-1\r\n        array.push(node.parentNode); //把这个节点的爸爸放到数组里\r\n      }\r\n    });\r\n    return jQuery(array);\r\n    //array没有什么可操作性，所以要封装一个操纵数组的对象，jQuery会返回一个对象，这个对象会操作这些爸爸\r\n  },\r\n\r\n  print() {\r\n    //实现print方法把当前elements元素打印出来\r\n    console.log(elements);\r\n  },\r\n\r\n  children() {\r\n    const array = []; //准备好一个数组\r\n    this.each((node) => {\r\n      array.push(...node.children); //...是把里面的东西拆开，第一个元素当做第一个参数，第二个元素当做第二个参数。\r\n      //等价于(node.children[0], node.children[1],node.children[2]...等等)\r\n    }); //遍历刚才的元素，\r\n    return jQuery(array);\r\n  },\r\n\r\n  //闭包：函数访问外部的变量\r\n  addClass(className) {\r\n    for (let i = 0; i < elements.length; i++) {\r\n      const element = elements[i];\r\n      element.classList.add(className);\r\n    }\r\n    return this;\r\n  },\r\n  end() {\r\n    return this.oldApi; //this 就是当前的api//api2   api2的旧api是api1。调end用新api调的\r\n  },\r\n};\r\n"]}