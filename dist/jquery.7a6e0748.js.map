{"version":3,"sources":["jquery.js"],"names":["window","jQuery","selectorOrArray","elements","document","querySelectorAll","Array","find","selector","array","i","length","elements2","from","concat","newApi","addClass","className","element","classList","add"],"mappings":"AAAAA,MAAM,CAACC,MAAP,GAAgB,UAASC,eAAT,EAAyB;AACrC,MAAIC,QAAJ,CADqC,CAErC;AACE;AACA;;AACF,MAAG,OAAOD,eAAP,KAA2B,QAA9B,EAAuC;AACnCC,IAAAA,QAAQ,GAAGC,QAAQ,CAACC,gBAAT,CAA0BH,eAA1B,CAAX;AACH,GAFD,MAEM,IAAGA,eAAe,YAAYI,KAA9B,EAAoC;AACtCH,IAAAA,QAAQ,GAAGD,eAAX;AAEH,GAVoC,CAWrC;AACA;;;AACA,SAAO;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACAK,IAAAA,IArBG,gBAqBEC,QArBF,EAqBW;AACV,UAAIC,KAAK,GAAG,EAAZ;;AACE,WAAI,IAAIC,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACP,QAAQ,CAACQ,MAAvB,EAA8BD,CAAC,EAA/B,EAAkC;AAC9B,YAAME,SAAS,GAAGN,KAAK,CAACO,IAAN,CAAWV,QAAQ,CAACO,CAAD,CAAR,CAAYL,gBAAZ,CAA6BG,QAA7B,CAAX,CAAlB;AACAC,QAAAA,KAAK,GAAGA,KAAK,CAACK,MAAN,CAAaF,SAAb,CAAR,CAF8B,CAG9B;AACD,OANK,CAON;AACA;;;AACA,UAAMG,MAAM,GAAGd,MAAM,CAACQ,KAAD,CAArB,CATM,CASsB;;AAC5B,aAAOM,MAAP,CAVM,CAUO;AACb;AACE;AAGA;AACF;AACE;AACT,KAvCE;AA2CH;AACAC,IAAAA,QA5CG,oBA4CMC,SA5CN,EA4CgB;AACf,WAAI,IAAIP,CAAC,GAAC,CAAV,EAAYA,CAAC,GAACP,QAAQ,CAACQ,MAAvB,EAA8BD,CAAC,EAA/B,EAAkC;AAC9B,YAAMQ,OAAO,GAAGf,QAAQ,CAACO,CAAD,CAAxB;AACAQ,QAAAA,OAAO,CAACC,SAAR,CAAkBC,GAAlB,CAAsBH,SAAtB;AACH;;AACD,aAAO,IAAP;AACH;AAlDE,GAAP;AAyDH,CAtED","file":"jquery.7a6e0748.js","sourceRoot":"..\\src","sourcesContent":["window.jQuery = function(selectorOrArray){\r\n    let elements\r\n    //const声明了必须赋值，这里用let\r\n      //先声明一个值为空，然后根据你的选择器是string还是Array，分别赋予不同的值\r\n      //，然后再返回一个api去操作它\r\n    if(typeof selectorOrArray === 'string'){\r\n        elements = document.querySelectorAll(selectorOrArray)\r\n    }else if(selectorOrArray instanceof Array){\r\n        elements = selectorOrArray\r\n\r\n    }\r\n    //对象一般用instanceof\r\n    //api 可以操作elements\r\n    return {\r\n\r\n        //find 一个test\r\n        // find(selector){\r\n        // //find是一个函数缩写，它可以接受一个选择器。\r\n        // //find就是找到当前元素里面的所有匹配这个选择器的元素\r\n        //    //，然后把元素放到数组里，在return这个数组\r\n        //   let array = []\r\n        //   for(let i=0;i<elements.length;i++){\r\n        //       array= array.concat(Array.from (elements[i]\r\n        //         .querySelectorAll(selector)))\r\n        //   }\r\n        //   return array\r\n        // }\r\n\r\n\r\n        //放在了上面来\r\n        //find多个test\r\n        //第一步：不能直接return之前的操作，我们要得到一个新的api，这个新的api要靠jQuery构造出来\r\n        //第二步：jQuery不能只接受选择器，还要可以接受一个数组\r\n        //第三步：如果接收的是个数组的话，就让新的elements\r\n        find(selector){\r\n            let array = []\r\n              for(let i=0;i<elements.length;i++){\r\n                  const elements2 = Array.from(elements[i].querySelectorAll(selector))\r\n                  array = array.concat(elements2)\r\n                  //多个test//首先遍历这个elements，然后做一个中间的变量elements2\r\n                }\r\n                //return一个新的api,因为return一个数组的话他不是一个函数无法调用\r\n                //所以selectorOrArray\r\n                const newApi = jQuery(array)//给我一个数组我给你返回一个新的api，如果直接用同一个api，那么每次得到新的元素都会污染之前的api，所有一定要得到一个新的对象，这个新对象就叫newApi\r\n                return newApi//现在这个api和刚刚的api就是完全不同的对象了，\r\n                //这个是由jQuery函数重新返回一个（new Object在new一个Object，两个Object是不同的object）\r\n                  //用重载判断一下选择器\r\n\r\n\r\n                  //简写 \r\n                //  return jQuery(array)//实际上我要得到一个新的api对象，这个新的api对象用来操作array。\r\n                  //总结一句话就是，jQuery你给我传什么，我就会返回一个对象操作什么。\r\n        },\r\n\r\n\r\n\r\n        //闭包：函数访问外部的变量\r\n        addClass(className){\r\n            for(let i=0;i<elements.length;i++){\r\n                const element = elements[i]\r\n                element.classList.add(className)\r\n            }\r\n            return this\r\n        },\r\n       \r\n\r\n\r\n\r\n\r\n    }\r\n}"]}