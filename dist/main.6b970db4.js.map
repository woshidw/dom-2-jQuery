{"version":3,"sources":["main.js"],"names":["x","jQuery","children","print"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAKA;AACA;AACE;AACF;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA,IAAMA,CAAC,GAAEC,MAAM,CAAC,OAAD,CAAf;AAEAD,CAAC,CAACE,QAAF,GAAaC,KAAb,IACA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACE;AACA;AACA","file":"main.6b970db4.js","sourceRoot":"..\\src","sourcesContent":["// jQuery('.test')//不返回元素们，返回api 对象\r\n//   .addClass('red')// this就是 api\r\n//   .addClass('blue')// this就是 api\r\n//   .addClass('green')//链式操作\r\n\r\n\r\n// // obj.fn(p1) //函数里的 this 就是 obj\r\n// // obj.fn.call(obj,p1)\r\n\r\n// var obj = new Object()\r\n\r\n\r\n\r\n// //find\r\n// const x1 =  jQuery('.test1').find('.child')\r\n// //获取child1，然后在里面去查找find，找什么呢？找类为child的元素\r\n// console.log(x1)//一个test1的时候\r\n\r\n\r\n\r\n\r\n//多个test\r\n//把index.html的div改成了test，这时如果得到test，会有三个div\r\n  //，三个div里分别去找child，一共会的3+2+1=6个child\r\n// jQuery('.test').find('.child').addClass('red')\r\n\r\n//如果你通过需要改变对象的话，就再构造一个jQuery对象，jQuery api去操作\r\n// const api1 = jQuery('.test')//首先获取到test，然后在上面加上了blue\r\n// api1.addClass('blue')\r\n\r\n// const api2 = api1.find('.child').addClass('red')//然后用api1获取到child，child前加red\r\n\r\n// api1.addClass('green')//再杀一个回马枪用api1添加一个green。\r\n// //如何让addClass操作的是class而不是child\r\n\r\n\r\n//简化后：\r\n// jQuery('.test')\r\n//   .find('.child') \r\n//   .addClass('red')\r\n//   .addClass('blue')\r\n//   .addClass('green')\r\n//我们先找到.test，然后在找到里面所有的child，然后在child上面加个red，还可以加其他的\r\n\r\n\r\n//操作.child后又想返回.test，在test身上加：\r\n//方法一：加个变量\r\n//   .end()//当前child结束了，只有end就回去上一层的api\r\n//   .addClass('yellow')//此时yellow在test上\r\n\r\n//   //中间命个名\r\n//   const api1 = jQuery('.test')\r\n//   const api2 = api1.find('.child') .addClass('red') .addClass('blue') .addClass('green')\r\n//   const oldApi = api2.end() .addClass('yellow')\r\n\r\n\r\n//遍历每个元素\r\n// const x =jQuery('.test')\r\n//   .find('.child')\r\n\r\n// x.each((div) => console.log(div))\r\n//each接收一个函数，然后在某个时刻会调用这个函数，调用的时候会传一个elements[i]和一个i，你可以在你的参数里接收这个elements[i]和i\r\n\r\n\r\n//爸爸\r\n// const x =jQuery('.test')\r\n// x.parent().print()\r\n//直接用获取到的api去print一下，它就会操作这些爸爸\r\n\r\nconst x =jQuery('.test')\r\n\r\nx.children().print()\r\n//获取children并打印出来\r\n\r\n\r\n\r\n\r\n\r\n//命名风格\r\n// const div1 = document.querySelector('.test') //找到第一个以类名为test的div\r\n//如果是普通的div元素，用el开头或者直接叫div\r\n\r\n// const $div2 = $('.test') //div2获取的就是操作对应div的一个api，其实不是div\r\n//但是如果是jQuery产生的一个api对象，那么要用jQuery的$开头\r\n\r\n//疑问？\r\n  //div2 到底是 DOM对象 还是 JQuery对象\r\n  //DOM 对象只能使用DOM API 比如 querySelector appendChild\r\n  //jQuery 对象只能使用jQuery 的API 比如 find each\r\n  \r\n\r\n  "]}